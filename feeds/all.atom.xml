<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>zaidox</title><link href="http://zaidox.com/" rel="alternate"></link><link href="http://zaidox.com/feeds/all.atom.xml" rel="self"></link><id>http://zaidox.com/</id><updated>2012-12-01T04:05:17-08:00</updated><entry><title>artisan, part 1</title><link href="http://zaidox.com/artisan-part-1.html" rel="alternate"></link><updated>2012-12-01T04:05:17-08:00</updated><author><name>alven diaz</name></author><id>tag:zaidox.com,2012-12-01:artisan-part-1.html</id><summary type="html">&lt;p&gt;be an artisan, a craftsmen, a master.&lt;/p&gt;
&lt;p&gt;being a practitioner of any discipline brings a unique sense of enlightenment. one of the best aspects of perfecting a skill set is the ability to measure progress over a period of time. that alone is a very helpful asset. the feedback itself provides experience, direction, and valuable lessons. as one transcends to the master level, the scope of the discipline extends beyond itself. a master craftsman understands that opportunities exist at a larger scale.&lt;/p&gt;
&lt;p&gt;as a software developer, engineer, hacker, coder, programmer, a person who ultimately ends up writing code, the product i create will need to provide value to other people. the majority of the software i write &lt;em&gt;will&lt;/em&gt; be used by others: implemented and coded upon by developers, deployed by (hopefully) machines, tested by other code, and of course, used by other users. while the goal is to provide value to something or someone, i believe that the experience of how this value is provided is equally important. the value of software extends to that  experience.&lt;/p&gt;
&lt;p&gt;the following are a set of standards i try to bring into all my code, and what i look for in other people's software.&lt;/p&gt;
&lt;h3&gt;as a user:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;the majority of an application's value should be provided with just one action&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;a user should get a majority of the value provided by your software with just one action (a click, a form submit, an application launch, etc.). obviously this belief is heavily biased towards a convention over configuration philosophy. however, as software matures and more software is designed to serve just a single purpose or responsibility, i believe that software will eventually evolve in this direction.&lt;/p&gt;
&lt;p&gt;the best example of an application that does one thing well and within the threshold of one action is &lt;a href="https://www.google.com/"&gt;google&lt;/a&gt;. as a user, i can get search results &lt;strong&gt;immediately&lt;/strong&gt; as i start typing on the keyboard. this is further enhanced by the technology behind google instant. if the user's browser supports it, the searcher never even has to fully complete their action (by pressing enter or clicking the search button) to get value out of the product. google has the highest conversion rate of any landing page. 100 fucking percent. i guess the only thing better is internet explorer for chrome or firefox.&lt;/p&gt;
&lt;h3&gt;as an developer / implementor&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;minimize start to result time&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;got an API? good, i should be able to get data out of it in less than 10 seconds. using oauth? fine, 4 hours max. 3.99 to implement some shitty oauth provider and the last 10 seconds to pull the data. from experience, developers tend to get angry easily, especially when  having to work with some weird shitty code that doesn't really do what it says it does or when it takes eight centuries setup a simple GET request.&lt;/p&gt;
&lt;p&gt;who implements the consumption of your service? developers do. so if your service, code, library, whatever causes implementors to get angry, you are going to have a bad time. try to reduce the amount of setup required to to perform actions against your API. things like authentication shouldn't be required for data that isn't private.&lt;/p&gt;
&lt;p&gt;a great example of an easy to use API is &lt;a href="https://www.opencnam.com/"&gt;OpenCNAM&lt;/a&gt;. its so easy, you can literally just drag the example text from the home page into your browser url bar and get results. its like magic, only real. for actual code implementation, the setup is just as easy. a simple GET requests with the phone number as a query and you get your data. need authentication? just add it through HTTP auth or send it as query parameters. its all good.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;document. all. the. things&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;this is even more true if your product or software is not open sourced. if you are developing software that will be used by anything but you, it should have some form of documentation. yeah yeah, documentations sucks, boo. however, documentation does not have to be 100 page UML diagrams. there are plenty of forms of documentation: unit tests, specifications, bug requests, code, etc.&lt;/p&gt;
&lt;p&gt;unfortunately, i have not really found any project with documentation to serve as an example. however, i've heard (personally severely witnessed) that the python community is all about docs. some really great examples are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://python.org/doc/"&gt;python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.djangoproject.com/en/1.4/"&gt;django&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;external dependencies should be nearly invisible in code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;if a software dependency requires a lot of management code within your own software code, it shoulder either be abstracted into some form of a client, or have the dependency re-written if possible. ideally, the dependent software should perform in reverse by hooking into your application's code rather than the other way around.&lt;/p&gt;
&lt;p&gt;in preferable cases, i lean towards the rewriting, &lt;strong&gt;especially&lt;/strong&gt; if that software is suppose to be consumed by other code. in reality thought, it is usually some 1985 legacy code. in which case you should wrap it in your own code. providing a single entry point for any external code or services allows for easy stubbing, mocking and substitution when designing tests around external stuff.&lt;/p&gt;
&lt;p&gt;in c#, &lt;code&gt;Interfaces&lt;/code&gt; make it really easy to guarantee a set of methods will always be available to a given class. this allows for easy differentiation between the contract and implementation of the object.&lt;/p&gt;
&lt;p&gt;one of the best approaches to this reverse dependency thing methodology i have seen has been implemented in  &lt;a href="http://msdn.microsoft.com/en-us/data/ef.aspx"&gt;Entity Framework&lt;/a&gt; Code First. any plain data object can be registered to the framework, yet still remain oblivious of it. the framework generates a proxy over the actual objects, manipulating properties over reflection, and handling all database stuff without the original object knowing.&lt;/p&gt;
&lt;h2&gt;beyond the code&lt;/h2&gt;
&lt;p&gt;while all my examples contained various usages and explanations of code, the lesson here is that as a developer you should think beyond the code. unless you live in some isolated universe dimension thingy, you work will come in contact with some third party. always, always, always think about how that party will interact with your creations.&lt;/p&gt;
&lt;p&gt;just remember,&lt;/p&gt;
&lt;p&gt;no matter &lt;em&gt;what&lt;/em&gt; you do in life, perfection should always be strived for. a state of total maturity, completion and faultlessness. it should not be contained, but left to leak into all other aspects of life.&lt;/p&gt;
&lt;p&gt;it is the ultimate end.&lt;/p&gt;</summary></entry><entry><title>introduction</title><link href="http://zaidox.com/introduction.html" rel="alternate"></link><updated>2012-11-19T23:47:51-08:00</updated><author><name>alven diaz</name></author><id>tag:zaidox.com,2012-11-19:introduction.html</id><summary type="html">&lt;p&gt;hi, this is my new blog.&lt;/p&gt;
&lt;p&gt;there is nothing here yet, but expect stuff soon!&lt;/p&gt;</summary></entry></feed>