<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>zaidox</title><link href="http://zaidox.com/" rel="alternate"></link><link href="http://zaidox.com/feeds/all.atom.xml" rel="self"></link><id>http://zaidox.com/</id><updated>2013-02-07T00:00:00-08:00</updated><entry><title>.net remote object lifetime</title><link href="http://zaidox.com/net-remote-object-lifetime.html" rel="alternate"></link><updated>2013-02-07T00:00:00-08:00</updated><author><name>alven diaz</name></author><id>tag:zaidox.com,2013-02-07:net-remote-object-lifetime.html</id><summary type="html">&lt;p&gt;lately, i've been digging deeper into the use of application domains within the .net framework. the APIs for &lt;code&gt;AppDomain&lt;/code&gt; are actually very simple to use and the documentation provided by Microsoft is also extremelly helpful. there were, however, a few random problems that i ran into while trying to implement them into my code.&lt;/p&gt;
&lt;h1&gt;application domains&lt;/h1&gt;
&lt;p&gt;for those who don't use .net, an application domain is a partition in the operating system's process where one or more applications reside. all objects within the same app domain communicate directly with each other. any object that attempts to communicate with a different application domain is either copied directly or communicates through a proxy. unless implemented from the &lt;code&gt;MarshalByRefObject&lt;/code&gt;, an object is implicitly marshal by value and will be copied. for most use cases however, you will want your objects to inherit from &lt;code&gt;MarshalByRefObject&lt;/code&gt; to prevent errors. &lt;/p&gt;
&lt;p&gt;the very first time a remote domain attempts to communicate with a &lt;code&gt;MarshalByRefObject&lt;/code&gt;, a proxy will be created and passed into the calling domain. any future calls to that object will be passed through the newly created proxy object.&lt;/p&gt;
&lt;h1&gt;in use&lt;/h1&gt;
&lt;p&gt;the project that i am currently working on requires heavy use of application domains. the core of the application is very simple shell. it communicates with a server to fetch different sets of assemblies, loads them into their respected application domains, executes runnable code and delegates instructions from the server into the running tasks within the domains.&lt;/p&gt;
&lt;p&gt;the purpose of the application domains are to provide a way to isolate and execute any externally loaded code without affecting the application itself. this provides an extra safeguard against any unstable code that could bring down the main process. another benefit of application domains is the ability to modify the internals of an application without shutting it down. this actually doubles as a benefit, as it allows for other domains to continue working while a new one is created!&lt;/p&gt;
&lt;h1&gt;a wild remoting exception appears&lt;/h1&gt;
&lt;p&gt;implementing the actual application domains was relatively easy. i was able to spin up a large amount of domains and bring them down pretty quickly too. testing as well seemed to indicate that everything was working as intended.&lt;/p&gt;
&lt;p&gt;but like anything ever, something will always go wrong :)&lt;/p&gt;
&lt;p&gt;during testing, i had left the actual process running for a long time (30+ minutes) and came back to an errored out screen.&lt;/p&gt;
&lt;p&gt;the error message looked something like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;RemotingException&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/asdjf3_random_nasdfj_numbers_and_jf392j3_stuff.rem&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;disconnected&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;exist&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the exception was something that i had never seen before. hell, even the error message was kind of strange since i did not have any code that was communicating with a 'server'. also, it seemed impossible to recreate the error after that first time.&lt;/p&gt;
&lt;h1&gt;.net remoting&lt;/h1&gt;
&lt;p&gt;after a bit of research, it turns out that i did not quite understand the way communication between application domains worked. traditionally, since .net is a garbage collected language, manual management of an object's lifetime is not needed. however, any object that crosses the boundaries of it's application domain is considered a &lt;em&gt;remote&lt;/em&gt; object and must be treated with extra care. &lt;/p&gt;
&lt;p&gt;since there is no guarantee that an object will exist once it leaves its domain, all MarshalByRefObjects implement a lifetime service. the lifetime service is an &lt;code&gt;ILease&lt;/code&gt; type that controls the lifetime policy for a particular instance of an object. unless specified, a remote object's lifetime is five minutes and will be released from memory if there is no activity during that time.&lt;/p&gt;
&lt;h1&gt;overriding the lifetime service&lt;/h1&gt;
&lt;p&gt;the quickest solution is to implement the following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;InitializeLifetimeService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;overriding the &lt;code&gt;InitializeLifetimeService&lt;/code&gt; method from &lt;code&gt;MarshalByRefObject&lt;/code&gt; seem to do the trick. however, by looking at the code sample, i could already tell this would cause some problems. when returning null, the object will be kept alive forever, possibly leading to memory issues.&lt;/p&gt;
&lt;p&gt;a better implementation would be to create the lease object and return that. this will require some fine tuning so that you dont end up with too short or too long of a lifetime.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;InitializeLifetimeService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;lease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ILease&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InitializeLifetimeService&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentState&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;LeaseState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Initial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InitialLeaseTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromMinutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SponsorshipTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromMinutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
        &lt;span class="n"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RenewOnCallTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;this can also be done through the application's config:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;system.runtime.remoting&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;application&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;lifetime&lt;/span&gt; &lt;span class="na"&gt;leaseTime=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1M&amp;quot;&lt;/span&gt; 
                &lt;span class="na"&gt;renewOnCallTime=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;30S&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;leaseManagerPollTime=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2M&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/system.runtime.remoting&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;note however that this applies the policy to all remote objects within your application. in my case, i have multiple remote objects with different lifetime requirements, so this implementation is of no use.&lt;/p&gt;
&lt;h1&gt;final thoughts&lt;/h1&gt;
&lt;p&gt;after running through different scenarios, i believe the best approach is to override the &lt;code&gt;InitializeLifetimeService&lt;/code&gt; method and return a lease object with a manually set policy. this allows me to really control the duration of each type of object that i'll be using.&lt;/p&gt;
&lt;p&gt;the application will be launching shortly. i will be returning with a post about the successes and failures of the project :)&lt;/p&gt;
&lt;p&gt;if you have any thoughts or better ideas, feel free to email me or contact me on twitter &lt;a href="https://twitter.com/zaidos"&gt;@zaidos&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>introduction</title><link href="http://zaidox.com/introduction.html" rel="alternate"></link><updated>2012-12-01T00:00:00-08:00</updated><author><name>alven diaz</name></author><id>tag:zaidox.com,2012-12-01:introduction.html</id><summary type="html">&lt;p&gt;hi, this is my new blog.&lt;/p&gt;
&lt;p&gt;there is nothing here yet, but expect stuff soon!&lt;/p&gt;</summary></entry></feed>