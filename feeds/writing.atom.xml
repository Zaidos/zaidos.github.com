<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Zaidox</title><link href="http://zaidox.com/" rel="alternate"></link><link href="http://zaidox.com/feeds/Writing.atom.xml" rel="self"></link><id>http://zaidox.com/</id><updated>2013-03-26T00:00:00-07:00</updated><entry><title>Teaching Programming</title><link href="http://zaidox.com/teaching-programming.html" rel="alternate"></link><updated>2013-03-26T00:00:00-07:00</updated><author><name>Alven Diaz</name></author><id>tag:zaidox.com,2013-03-26:teaching-programming.html</id><summary type="html">&lt;p&gt;Programming can be really difficult, especially for someone that has never done
it before. All the various languages, libraries, frameworks, patterns, and tools
can be very intimidating for anyone new to the concept of programming. Even as
someone slightly more experienced, it feels like there is a never ending amount
of information being introduced daily. So many tools and frameworks come and go,
that by the time you finally start to learn one, it has already become obsolete.&lt;/p&gt;
&lt;p&gt;In order to survive in the field, you always have to be challenging yourself.
Being a great programmer requires a constant balance of learning and doing. You
must spend time practicing your craft since it is the quickest way of receiving
feedback. At the same time, you must be constantly learning new techniques by
reading books, blogs, communicating with peers, and reading other code.&lt;/p&gt;
&lt;p&gt;I have found that one of the best ways to really understand something is to
try to teach it to somebody else. Teaching provides a different perspective into
something you might already know. Trying to simplify an explanation of an
advanced concept that might have taken you a few years can provide you with a
new way to implement that same concept in a more efficient or clearer way.&lt;/p&gt;
&lt;h1&gt;Some Prior Experience&lt;/h1&gt;
&lt;p&gt;I got my first taste of teaching when I was in university. I was initially asked
to start tutoring students who were enrolled in Computer Science courses,
although not necessarily Computer Science students. Most of them were actually
Mathematics or Physics majors, with maybe one or two actually enrolled in the
Computer Science program.&lt;/p&gt;
&lt;p&gt;Introducing those students to programming was a wonderful experience. Many were
filled with a curiosity, wondering how and why the computer was doing what it
was told. Since most of the students were pursuing degrees in other fields, it
was really exciting seeing them come up with ideas on how programming could help
them out.&lt;/p&gt;
&lt;p&gt;Unfortunately, you aren't always gifted with motivated individuals. A single bad
student can really discourage you from teaching. Some just wanted to get through
the course as quick as possible, and others just did not care (about anything).
It is really difficult to keep up the motivation to teach, especially when you
are exposed to these kinds of students often.&lt;/p&gt;
&lt;h1&gt;Teaching Again&lt;/h1&gt;
&lt;p&gt;For the last few months, I have been helping several friends and family members
learn how to program. Some have tried programming before, but most have never
ventured past a simple 'Hello World' example. One of them is my father, a semi
tech-savvy user. Two others are students, one in high school and the other at
university. The final is in the IT industry, currently working as a System
Administrator.&lt;/p&gt;
&lt;p&gt;All four of them have very different motivations for wanting to learn how to
program. My father is wanting to learn so that he can extend the capabilities
of a piece of software (&lt;a href="http://www.microsoft.com/games/flightsimulatorx/"&gt;Flight
Simulator&lt;/a&gt;) he uses often. One
is ultimately in it for the money, while the others are genuinely interested in
the characteristics and challenges that programming brings.&lt;/p&gt;
&lt;h1&gt;Difficulties&lt;/h1&gt;
&lt;p&gt;While there is great pleasure in teaching, coaching, and motivating someone, it
also comes with its difficulties. Of course, it is hard enough trying to manage
four different individual's levels and speeds of progress.&lt;/p&gt;
&lt;p&gt;What I have found is that a beginner programmer, especially one that has been
around more experienced programmers, is that they try to emulate the speed of
the more experienced one. This usually ends up hindering their learning
progress as they tend to focus on the wrong things. They spend time playing
around with shortcuts and code optimizations, often times not even understand
the code they are writing.&lt;/p&gt;
&lt;p&gt;Another thing that I have noticed is that the motivation behind wanting to learn
plays a huge role in how persistent people are. Those that are honestly
interested and curious about programming tend to want to explore and take
risks. They actively pursue knowledge, and even continue to teach themselves
when no one is around. The others tend to wait to be told what to do, or want
answers before even thinking of the questions.&lt;/p&gt;
&lt;p&gt;Also, I believe some people were just not meant to code. Simply put, coding is
not for everyone. It is not a motivational or skill set issue, just some
people's daily activities and thinking constantly pushes them away from a
programming mindset.&lt;/p&gt;
&lt;h1&gt;Balance&lt;/h1&gt;
&lt;p&gt;There is a constant challenge with how you help someone solve a problem,
especially when you know the answer. On one hand, you can just show them how to
to solve it, so that they can quickly and easily get feedback and continue
forward. However, the problem is now solved and the student may not have
understand why the problem existed in the first place, nor have they thought
about &lt;em&gt;why&lt;/em&gt; it was solved that specific way. On the other hand, leaving one to
struggle too long with a problem will eventually lead discouragement and
distraction.&lt;/p&gt;
&lt;p&gt;When teaching, I tend to lean towards a more passive observant role. I let the
student struggle for a bit through the different phases of learning:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Understanding the problem or question&lt;/li&gt;
&lt;li&gt;Identifying and locating the cause problem, if needed&lt;/li&gt;
&lt;li&gt;Developing a solution&lt;/li&gt;
&lt;li&gt;Implementing the solution&lt;/li&gt;
&lt;li&gt;Testing the solution&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I try to not become too involved with any one phase. I would rather a student
work through a solution and be confident in their answer, even if incorrect,
than to have them avoid it and give up early. Failing quickly and early
provides a quicker feedback loop and helps eliminate unnecessary solutions,
giving direction to the best answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Learning to program is really difficult. Teaching to program is even harder.&lt;/strong&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Have a similar experience? A better way of teaching? Feedback?&lt;/p&gt;
&lt;p&gt;I would love to hear it.
Send me an email and/or contact me from any of the options at the bottom of the
page.&lt;/p&gt;
&lt;/blockquote&gt;</summary></entry><entry><title>Hourly Estimates</title><link href="http://zaidox.com/hourly-estimates.html" rel="alternate"></link><updated>2013-03-24T00:00:00-07:00</updated><author><name>Alven Diaz</name></author><id>tag:zaidox.com,2013-03-24:hourly-estimates.html</id><summary type="html">&lt;p&gt;A few months ago, our team switched over to Scrum, a fairly modern software
development framework. Scrum is an implementation of the agile methodology
that focuses on roles, sprints, backlogs, and meetings.&lt;/p&gt;
&lt;p&gt;Lots and lots of meetings...&lt;/p&gt;
&lt;p&gt;Anyways, besides the large spike in meetings, the basic principles of Scrum
actually ended up fitting in quite well with how we were currently managing
all of our software development.
However, now that I've had a fair amount of experience with Scrum (and as a
part-time Scrum Master), I feel that there are certain parts of the methodology
that I don't quite buy into. Particularly, using hours to estimate tasks.&lt;/p&gt;
&lt;h1&gt;The Scrum Task&lt;/h1&gt;
&lt;p&gt;In Scrum, a task is a defined unit of work, usually estimated in hours. It is
commonly believed that hourly estimates are more accurate and provide the most
transparency. I believe this is true; however, not in software development.
In a professional environment, a software engineer has far more
responsibilities besides programming. A lot of these responsibilities cannot
be estimated, as they are out of the engineer's control. Even more so in a
start up environment.&lt;/p&gt;
&lt;p&gt;Some people recommend the use of 'ideal' (5-6) hours over 'real' (8) hours when
estimating their tasks. Theoretically, this should account for distractions and
various other activities (lunches, breaks, emails) for the day. However,
these distractions are often too sporiadic in when and where they occur, and
also the duration of the distraction.&lt;/p&gt;
&lt;h1&gt;A Solution?&lt;/h1&gt;
&lt;p&gt;After a few sprints, I begin to notice that most of my tasks usually ended up
occupying a whole day. When I become aware of the pattern, a bit more thought
provided me with a reasonable assumption as to why this was happening.&lt;/p&gt;
&lt;p&gt;See, in any given day, a reasonably sized task (4 hours) would be completed.
In a perfect world and an 8 hour workday, this would leave 4 hours left.
In our world, remove 2-3 hours for lunch, emails, communication, and everything
else, you are left with 1-2 hours in the day. Starting anything smaller than
2 hours brings in too much task management overhead and/or requires a substantial
amount of ramp up time. Of course, anything larger and it is better off to
start working on it another day. Eventually, a 4 hour task ended up being a
day's worth of work and that led me to my new conclusion:&lt;/p&gt;
&lt;p&gt;I believe that the ideal base unit of time for software estimation is a day.
It is appropriately sized and it works along a
&lt;a href="http://www.paulgraham.com/makersschedule.html"&gt;Maker's schedule&lt;/a&gt;. A day
provides a more reasonable and realistic estimate to software development, and
the activities that revolve around it. It allows for common workplace
distractions, as well as actual non-coding work.&lt;/p&gt;
&lt;p&gt;I do not believe hourly estimates provide much value.
A software project's success or failure has never come down to the hour, and
it never should.&lt;/p&gt;</summary></entry><entry><title>.NET Remote Object Lifetime</title><link href="http://zaidox.com/net-remote-object-lifetime.html" rel="alternate"></link><updated>2013-02-07T00:00:00-08:00</updated><author><name>Alven Diaz</name></author><id>tag:zaidox.com,2013-02-07:net-remote-object-lifetime.html</id><summary type="html">&lt;p&gt;Lately, I have been digging deeper into the use of application domains within the .NET framework. The APIs for &lt;code&gt;AppDomain&lt;/code&gt; are actually very simple to use and the documentation provided by Microsoft is also extremelly helpful. There were, however, a few random problems that I ran into while trying to implement them into my code.&lt;/p&gt;
&lt;h1&gt;Application Domains&lt;/h1&gt;
&lt;p&gt;For those who are not familiar with .NET, an application domain is a partition in the operating system's process where one or more applications reside. All objects within the same application domain communicate directly with each other. Any object that attempts to communicate with a different application domain is either copied directly or communicates through a proxy. Unless implemented from the &lt;code&gt;MarshalByRefObject&lt;/code&gt;, an object is implicitly marshal by value and will be copied. For most use cases you will want your objects to inherit from &lt;code&gt;MarshalByRefObject&lt;/code&gt; to prevent errors. &lt;/p&gt;
&lt;p&gt;The very first time a remote domain attempts to communicate with a &lt;code&gt;MarshalByRefObject&lt;/code&gt;, a proxy will be created and passed into the calling domain. Any future calls to that object will be passed through the newly created proxy object.&lt;/p&gt;
&lt;p&gt;The purpose of application domains are to provide a way to isolate and execute any external code without affecting the application process itself. This provides an extra safeguard against any unstable code that could bring down the main process. Another benefit of application domains is the ability to modify the assemblies in memory of an application without shutting it down. This actually doubles as a benefit, as it allows for other domains to continue working while a new one is created!&lt;/p&gt;
&lt;h1&gt;In use&lt;/h1&gt;
&lt;p&gt;The project that I am currently working on requires heavy use of application domains. The core of the application is a very simple shell. It communicates with a server to fetch different sets of assemblies, loads them into their respected application domains, executes runnable code and delegates instructions from the server into any running tasks within the domains.&lt;/p&gt;
&lt;h1&gt;A wild remoting exception appears!&lt;/h1&gt;
&lt;p&gt;Implementing the actual application domains proved relatively easy. I was able to spin up a large amount of domains and bring them down pretty quickly too. Testing as well seemed to indicate that everything was working as intended.&lt;/p&gt;
&lt;p&gt;But like any piece of code, something will always go wrong :)&lt;/p&gt;
&lt;p&gt;During testing, I had left the actual process running for a long time (30+ minutes) and came back to an errored out screen. The error message looked something like this:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;RemotingException&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; 
&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/asdjf3_random_nasdfj_numbers_and_jf392j3_stuff.rem&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;has&lt;/span&gt; &lt;span class="n"&gt;been&lt;/span&gt; &lt;span class="n"&gt;disconnected&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;does&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;exist&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The exception was something that I had never seen before. Hell, even the error message was kind of strange since I did not have any code that was communicating with a 'server' yet. Also, it was nearly impossible to recreate the same error because I had no idea what caused it.&lt;/p&gt;
&lt;h1&gt;.NET Remoting&lt;/h1&gt;
&lt;p&gt;After a bit of research, it turns out that I did not quite understand the way communication between application domains worked. Traditionally, since .NET is a garbage collected language, manual management of an object's lifetime is not needed. However, any object that crosses the boundaries of it's application domain is considered a &lt;em&gt;remote&lt;/em&gt; object and must be treated with extra care. &lt;/p&gt;
&lt;p&gt;Since there is no guarantee that an object will exist once it leaves its domain, all MarshalByRefObjects implement a lifetime service. The lifetime service is an &lt;code&gt;ILease&lt;/code&gt; type that controls the lifetime policy for a particular instance of an object. Unless specified, a remote object's lifetime is five minutes and will be released from memory if there is no activity during that time.&lt;/p&gt;
&lt;h1&gt;Overriding the lifetime service&lt;/h1&gt;
&lt;p&gt;the quickest solution is to implement the following:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;InitializeLifetimeService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Overriding the &lt;code&gt;InitializeLifetimeService&lt;/code&gt; method from &lt;code&gt;MarshalByRefObject&lt;/code&gt; seem to do the trick. However, by looking at the code sample, I could already tell this would cause some problems. When returning null, the object will be kept alive forever, possibly leading to memory issues.&lt;/p&gt;
&lt;p&gt;A better implementation would be to create the lease object and return that. This will require some fine tuning so that you dont end up with too short or too long of a lifetime.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;override&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="nf"&gt;InitializeLifetimeService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;lease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ILease&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InitializeLifetimeService&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CurrentState&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;LeaseState&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Initial&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InitialLeaseTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromMinutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SponsorshipTimeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromMinutes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
        &lt;span class="n"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RenewOnCallTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TimeSpan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FromSeconds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;lease&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This can also be done through the application's config:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;system.runtime.remoting&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;application&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;lifetime&lt;/span&gt; &lt;span class="na"&gt;leaseTime=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1M&amp;quot;&lt;/span&gt; 
                &lt;span class="na"&gt;renewOnCallTime=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;30S&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;leaseManagerPollTime=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;2M&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/system.runtime.remoting&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that this applies the policy to all remote objects within your application. In my particular case, I have multiple remote objects with different lifetime requirements, so this implementation isn't entirely reasonable.&lt;/p&gt;
&lt;h1&gt;Final thoughts&lt;/h1&gt;
&lt;p&gt;After running through different scenarios, I believe the best approach is to override the &lt;code&gt;InitializeLifetimeService&lt;/code&gt; method and return a lease object with a manually set policy. This allows me to really control the duration of each type of object that I'll be using and tune them to optimize performance.&lt;/p&gt;
&lt;p&gt;The application will be launching shortly. I will be returning with a post about the successes and failures of the project :)&lt;/p&gt;
&lt;p&gt;If you have any thoughts or better ideas, feel free to email me or contact me on twitter &lt;a href="https://twitter.com/zaidos"&gt;@zaidos&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>Introduction</title><link href="http://zaidox.com/introduction.html" rel="alternate"></link><updated>2012-12-01T00:00:00-08:00</updated><author><name>Alven Diaz</name></author><id>tag:zaidox.com,2012-12-01:introduction.html</id><summary type="html">&lt;p&gt;Hi! This is my new blog.&lt;/p&gt;
&lt;p&gt;There is nothing here yet, but expect stuff soon!&lt;/p&gt;</summary></entry></feed>